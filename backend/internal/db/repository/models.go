// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package repository

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type ApplicationStatus string

const (
	ApplicationStatusPending ApplicationStatus = "pending"
	ApplicationStatusDone    ApplicationStatus = "done"
)

func (e *ApplicationStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ApplicationStatus(s)
	case string:
		*e = ApplicationStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ApplicationStatus: %T", src)
	}
	return nil
}

type NullApplicationStatus struct {
	ApplicationStatus ApplicationStatus `json:"application_status"`
	Valid             bool              `json:"valid"` // Valid is true if ApplicationStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullApplicationStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ApplicationStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ApplicationStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullApplicationStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ApplicationStatus), nil
}

type UserRoles string

const (
	UserRolesAdmin UserRoles = "admin"
	UserRolesUser  UserRoles = "user"
)

func (e *UserRoles) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRoles(s)
	case string:
		*e = UserRoles(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRoles: %T", src)
	}
	return nil
}

type NullUserRoles struct {
	UserRoles UserRoles `json:"user_roles"`
	Valid     bool      `json:"valid"` // Valid is true if UserRoles is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRoles) Scan(value interface{}) error {
	if value == nil {
		ns.UserRoles, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRoles.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRoles) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRoles), nil
}

type Application struct {
	ID        uuid.UUID         `json:"id"`
	Text      string            `json:"text"`
	Status    ApplicationStatus `json:"status"`
	UnitID    uuid.UUID         `json:"unit_id"`
	UserTgID  pgtype.Int8       `json:"user_tg_id"`
	CreatedAt pgtype.Timestamp  `json:"created_at"`
	UpdatedAt pgtype.Timestamp  `json:"updated_at"`
}

type Unit struct {
	ID        uuid.UUID        `json:"id"`
	Name      string           `json:"name"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

type User struct {
	ID           uuid.UUID        `json:"id"`
	Name         string           `json:"name"`
	Surname      string           `json:"surname"`
	Email        string           `json:"email"`
	PasswordHash string           `json:"password_hash"`
	Role         UserRoles        `json:"role"`
	CreatedAt    pgtype.Timestamp `json:"created_at"`
	UpdatedAt    pgtype.Timestamp `json:"updated_at"`
}

type UserNotificationTg struct {
	ID         int64            `json:"id"`
	TgUsername string           `json:"tg_username"`
	CreatedAt  pgtype.Timestamp `json:"created_at"`
	UpdatedAt  pgtype.Timestamp `json:"updated_at"`
}

type UserTg struct {
	ID         int64            `json:"id"`
	Name       string           `json:"name"`
	TgUsername string           `json:"tg_username"`
	UnitID     uuid.UUID        `json:"unit_id"`
	CreatedAt  pgtype.Timestamp `json:"created_at"`
	UpdatedAt  pgtype.Timestamp `json:"updated_at"`
}
