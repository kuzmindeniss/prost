package helpers

import (
	"testing"
)

func TestGetApplicationTextFromDraft(t *testing.T) {
	tests := []struct {
		name     string
		input    string
		expected string
	}{
		{
			name: "standard format",
			input: `
üõ†Ô∏è *–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞—è–≤–∫–∏:* üõ†Ô∏è
__–ù—É–∂–Ω–æ –ø–æ—á–∏–Ω–∏—Ç—å –¥–≤–µ—Ä—å__

üë∑ *–û—Ç–ø—Ä–∞–≤–∏–ª:*
__–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤__

üèóÔ∏è *–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:*
__–¢–µ—Ö–æ—Ç–¥–µ–ª__
`,
			expected: "–ù—É–∂–Ω–æ –ø–æ—á–∏–Ω–∏—Ç—å –¥–≤–µ—Ä—å",
		},
		{
			name: "multiline application text",
			input: `
üõ†Ô∏è *–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞—è–≤–∫–∏:* üõ†Ô∏è
__–ù—É–∂–Ω–æ –ø–æ—á–∏–Ω–∏—Ç—å –¥–≤–µ—Ä—å
–ò –∑–∞–º–µ–Ω–∏—Ç—å –ª–∞–º–ø–æ—á–∫—É
–ò –ø–æ–∫—Ä–∞—Å–∏—Ç—å —Å—Ç–µ–Ω—É__

üë∑ *–û—Ç–ø—Ä–∞–≤–∏–ª:*
__–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤__

üèóÔ∏è *–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:*
__–¢–µ—Ö–æ—Ç–¥–µ–ª__
`,
			expected: "–ù—É–∂–Ω–æ –ø–æ—á–∏–Ω–∏—Ç—å –¥–≤–µ—Ä—å\n–ò –∑–∞–º–µ–Ω–∏—Ç—å –ª–∞–º–ø–æ—á–∫—É\n–ò –ø–æ–∫—Ä–∞—Å–∏—Ç—å —Å—Ç–µ–Ω—É",
		},
		{
			name: "with additional markdown",
			input: `
üõ†Ô∏è *–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞—è–≤–∫–∏:* üõ†Ô∏è
__*–°—Ä–æ—á–Ω–æ* –Ω—É–∂–Ω–æ –ø–æ—á–∏–Ω–∏—Ç—å –¥–≤–µ—Ä—å__

üë∑ *–û—Ç–ø—Ä–∞–≤–∏–ª:*
__–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤__

üèóÔ∏è *–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:*
__–¢–µ—Ö–æ—Ç–¥–µ–ª__
`,
			expected: "*–°—Ä–æ—á–Ω–æ* –Ω—É–∂–Ω–æ –ø–æ—á–∏–Ω–∏—Ç—å –¥–≤–µ—Ä—å",
		},
		{
			name: "missing closing marker",
			input: `
üõ†Ô∏è *–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞—è–≤–∫–∏:* üõ†Ô∏è
__–ù—É–∂–Ω–æ –ø–æ—á–∏–Ω–∏—Ç—å –¥–≤–µ—Ä—å__

üë∑ *–û—Ç–ø—Ä–∞–≤–∏–ª:*
`,
			expected: "–ù—É–∂–Ω–æ –ø–æ—á–∏–Ω–∏—Ç—å –¥–≤–µ—Ä—å",
		},
		{
			name: "missing opening marker",
			input: `
__–ù—É–∂–Ω–æ –ø–æ—á–∏–Ω–∏—Ç—å –¥–≤–µ—Ä—å__

üë∑ *–û—Ç–ø—Ä–∞–≤–∏–ª:*
__–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤__
`,
			expected: "–ù—É–∂–Ω–æ –ø–æ—á–∏–Ω–∏—Ç—å –¥–≤–µ—Ä—å",
		},
		{
			name: "without underscores",
			input: `
üõ†Ô∏è *–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞—è–≤–∫–∏:* üõ†Ô∏è
–ù—É–∂–Ω–æ –ø–æ—á–∏–Ω–∏—Ç—å –¥–≤–µ—Ä—å

üë∑ *–û—Ç–ø—Ä–∞–≤–∏–ª:*
__–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤__
`,
			expected: "–ù—É–∂–Ω–æ –ø–æ—á–∏–Ω–∏—Ç—å –¥–≤–µ—Ä—å",
		},
		{
			name:     "completely different format",
			input:    "Some random text that doesn't match the format",
			expected: "Some random text that doesn't match the format",
		},
		{
			name:     "empty input",
			input:    "",
			expected: "",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := GetApplicationTextFromDraft(tt.input)
			if result != tt.expected {
				t.Errorf("GetApplicationTextFromDraft(%q) = %q, want %q", tt.input, result, tt.expected)
			}
		})
	}
}
